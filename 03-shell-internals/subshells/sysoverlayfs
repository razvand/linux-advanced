#!/bin/bash
### BEGIN INIT INFO
# Provides:          sysoverlayfs
# Required-Start:    $local_fs $syslog
# Required-Stop:     $local_fs $syslog
# Default-Start:     2
# Default-Stop:
# Short-Description: Freezing script
# Description:       Freezing script
#
### END INIT INFO
# -*- coding: utf-8 -*-

# Last update: 2016-02-21
# Disclaimer: use it at your own risk

# Support: USO/RL/SO/SO2 team
#  Mircea Bardac  (cs@mircea.bardac.net)
#  George Milescu (george.milescu@gmail.com)
#  Razvan Deaconescu (razvan.deaconescu@cs.pub.ro)

# configuration variables

# UNFROZEN_DISK is used as a storage disk for the data which
# must not be available on next reboot
# WARNING: this is being formatted if unaccessible
# WARNING: make sure you change this variable when installing the script
# You can also use UNFROZEN_DISK_MATCH to determine on the fly the partition
# to be used for the unfrozen files. This can be useful in systems where,
# depending on the kernel version, the partitions are named for example
# hda6 or sda6
#UNFROZEN_DISK_MATCH=/dev/[sh]da3
UNFROZEN_DISK=/dev/sda6

# Uncomment the line below to prevent the script from running.
# Doing this will leave the system unfrozen.
#exit 0


# -----------------------------------------------------------------------
# DO NOT modify below unless you know what you're doing

EXEC_PATH=/sbin/sysoverlayfs

if test ! -z $UNFROZEN_DISK_MATCH; then
    UNFROZEN_DISK=$(fdisk -l | grep ^/ | grep $UNFROZEN_DISK_MATCH | head -n 1 | cut -d" " -f 1)
fi

if test -z $UNFROZEN_DISK; then
    logger -s -t "sysoverlayfs" "Failed freezing. No UNFROZEN_DISK specified."
    exit 1
fi

logger -s -t "sysoverlayfs" "Using $UNFROZEN_DISK as unfrozen disk."

# Don't freeze if nofreeze is given on kernel cmd line.
# To use this effectively, add a line like the following to /boot/grub/menu.lst:
# `# altoptions=(no freeze) nofreeze'
# This will add a boot option that will boot unfreezed (by passing the nofreeze option).
# Make sure the line is commented; also keep the original `altoptions=(...) single' line.
# -octav
if [[ "`cat /proc/cmdline`" =~ "nofreeze" ]]; then
        logger -s -t "sysoverlayfs" "Starting unfrozen due to nofreeze parameter in kernel command line."
        exit 0
fi

# TODO(Mircea): this doesn't work as expected - just ignore
# Iterate through all USB devices
dev_dir=/sys/bus/usb/devices
while read d; do
    # extract USB device serial number and product Id
    key_serial=$(cat "$dev_dir/$d/serial" 2>/dev/null)
    key_product=$(cat "$dev_dir/$d/idProduct" 2>/dev/null)
    unique_id="$key_serial $key_product"

    # if the pair (serial number, product Id) matches a known combination
    # exit the script; otherwise, continue running the freezing procedure
    case "$unique_id" in
	    "180000000026EE 0151") exit 0; ;;
	    "A900000000025781 1000") exit 0; ;;
	    *) ;;
    esac
done < <(ls $dev_dir/ -1 | grep -v ":" | grep -v "usb")

if [ "-$1" == "-restart" ]; then
	echo "Error: Restart is not supported."
	exit 1
fi

logger -s -t "sysoverlayfs" "Sanitizing system..."

# cleanup root traces from the unfrozen state
rm -f /root/.bash_history
rm -f /root/.ssh/known_hosts

# cleanup student traces from the unfrozen state
cd /home/student
rm -f .bash_history                          # empty history
rm -f .ssh/known_hosts                       # empty known_hosts (ssh)
rm -rf .mozilla/firefox/*/history.dat    # remove Firefox history
rm -rf .mozilla/firefox/*/Cache/         # remove Firefox cache
rm -rf .mozilla/firefox/*/places.sqlite  # remove Firefox history
rm -f .DCOPserver*    # cleanup for kdeinit

# clean apt cache
#rm -rf /var/cache/apt/archives/*.deb

# clean network interface information
#rm -f /etc/udev/rules.d/70-persistent-net.rules

# persistent interface names
# use PCI Bus ID number to sort interfaces
# * http://www.linuxfromscratch.org/blfs/view/development/chapter07/network.html
# rebuild /etc/network/interfaces with all interfaces configured with DHCP
cat >/etc/network/interfaces <<EOF
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

EOF

intno=0
for dir in /sys/class/net/* ; do
    [ -e $dir/device ] && {
        # this lists Bus ID numbers for each interface
        basename $(readlink -f $dir/device)
    }
done | sort -ur | while read busid; do
    # Bus ID numbers are
    # * selected to be unique (as one interface might appear multiple times)
    # * sorted in reverse, as the built-in Ethernet interface is usually placed
    #   last, and we want it to be eth0
    echo ACTION==\"add\", SUBSYSTEM==\"net\", BUS==\"pci\", KERNELS==\"$busid\", NAME=\"eth$intno\"
    echo -e "iface eth$intno inet dhcp\n" >> /etc/network/interfaces
    # The /etc/network/interfaces file is built without "auto ethX" because
    # we do not want the system on boot to wait for DHCP on each interface.
    # Instead, we start in background one dhclient command for each interface.
    dhclient "eth$intno" &
    intno=$[$intno + 1]
done > /etc/udev/rules.d/70-persistent-net.rules # save rules in a file
# The generated files will be used on next boot

# clean sudo commands traces
rm -rf /var/log/auth.log*

logger -s -t "sysoverlayfs" "Done sanitizing system."

if [ "-$1" == "-stop" ]; then
    logger -s -t "sysoverlayfs" "Cleaning up unfrozen disk..."
    rm -rf /.systmp/*
    logger -s -t "sysoverlayfs" "Done cleaning up unfrozen disk."
    exit 0
fi

# mounting systmp
rm -rf /.systmp
mkdir /.systmp

# $UNFROZEN_DISK is the partition where everything is mounted rw
# comment the line below if you use .systmp on another partition

/bin/mount $UNFROZEN_DISK /.systmp

if [ $? -ne 0 ]; then
    logger -s -t "sysoverlayfs" "* Formatting temporary space..."
    /sbin/mkfs.ext4 -q $UNFROZEN_DISK
    /bin/mount -t ext4 $UNFROZEN_DISK /.systmp
fi

logger -s -t "sysoverlayfs" "Starting freezing..."

# cleanup data written since the previous freeze
# "/.systmp/*" is used instead of "/.systmp" because it might be mounted
# on a different partition
rm -rf /.systmp/*

# extra directories to be frozen
# WARNING: by default, /var is not frozen

# next variables are not used since we now freeze all /var/lib
#VZ_DIRS="/var/lib/vz/private /var/lib/vz/template /var/lib/vz/dump"
#APT_DIRS="/var/lig/dpkg /var/lib/apt /var/lib/aptitude"
#MAIL_DIRS="/var/lib/mail /var/lib/postfix /var/lib/courier"

# old version; kept out of nostalgy
#for i in $(ls -al / | grep ^d | tr -s ' ' | cut -d ' ' -f 9 | grep -v ^\\.); do

dir_list=$(find / -maxdepth 1 -mindepth 1 -type d | grep -v '\(/tmp\|/cdrom\|/sys\|/proc\|/.systmp\|/dev\|/run\|/selinux\)')

for d in $dir_list; do
    subdir_list=$(find "$d" -maxdepth 1 -mindepth 1 -type d)
    for sd in $subdir_list; do
        mkdir -p /.systmp"$sd"
    done
    # Create workdir for overlayfs.
    mkdir -p /.systmp/workdir-${d/\//}
done
sudo chown student:student /.systmp/workdir-home

#extra_dir_list="/var/www /var/spool/cron/crontabs /var/lib /var/spool /var/cache/bind"
#extra_dir_list="/var/www /var/spool/cron/crontabs /var/spool /var/cache/bind"
#extra_dir_list=""

#for d in $extra_dir_list; do
#    mkdir -p /.systmp"$d"
#    [ ! -d $i ] && mkdir -p $i
#    mkdir -p /.systmp/workdir-${d/\//}
#done


# Freeze directories.
for d in $dir_list; do
    /bin/mount -t overlay -o upperdir=/.systmp$d,lowerdir=$d,workdir=/.systmp/workdir-${d/\//} overlay $d
done

## Freeze extra directories.
#for d in $extra_dir_list; do
#    /bin/mount -t overlay -o upperdir=/.systmp$d,lowerdir=$d,workdir=/.systmp/workdir-${d/\//} overlay $d
#done

# script protection by default (probably useless if they have root access)
chmod 111 ${EXEC_PATH}

logger -s -t "sysoverlayfs"  "Freezing complete. Enjoy."
sudo chown student:student /home/student
